import React, { Component } from 'react';
import moment from 'moment';
import DayPicker, { DateUtils } from 'react-day-picker';

import 'react-day-picker/lib/style.css';

const overlayStyle = {
  position: 'absolute',
  background: 'white',
  boxShadow: '0 2px 5px rgba(0, 0, 0, .15)',
  zIndex: 1
};


const currentYear = new Date().getFullYear();
const fromMonth = new Date(currentYear, 0, 1, 0, 0);
const toMonth = new Date(currentYear + 10, 11, 31, 23, 59);

// Component will receive date, locale and localeUtils props
function YearMonthForm({ date, localeUtils, onChange }) {
  const months = localeUtils.getMonths();

  const years = [];
  for (let i = fromMonth.getFullYear(); i <= toMonth.getFullYear(); i += 1) {
    years.push(i);
  }

  const handleChange = function handleChange(e) {
    const { year, month } = e.target.form;
    // let key =  (!e.target.parentNode.parentNode.nextElementSibling) ? 'toMonth' : 'fromMonth'
    onChange(new Date(year.value, month.value));
  };

  return (
    <form className="DayPicker-Caption">
      <select name="month" onChange={handleChange} value={date.getMonth()}>
        {months.map((month, i) => <option key={i} value={i}>{month}</option>)}
      </select>
      <select name="year" onChange={handleChange} value={date.getFullYear()}>
        {years.map((year, i) => (
          <option key={i} value={year}>
            {year}
          </option>
        ))}
      </select>
    </form>
  );
}


export default class InputFieldOverlay extends Component {
  constructor (props) {
      super(props);
      this.state = {
      showOverlay: false,
      value: '',
      selectedDay: null,
      from: null,
      to: null,
      finalValue: null,
      month: fromMonth,
      enteredTo: null // Keep track of the last day for mouseEnter.
    };
    this.input = null;
    this.daypicker = null;
    this.clickedInside = false;
    this.clickTimeout = null;
    this.handleInputChange = this.handleInputChange.bind(this)
    this.handleDayClick = this.handleDayClick.bind(this)
    this.handleInputFocus = this.handleInputFocus.bind(this)
    this.handleDayMouseEnter = this.handleDayMouseEnter.bind(this)
    this.isSelectingFirstDay = this.isSelectingFirstDay.bind(this)
    this.reset = this.reset.bind(this)
    this.resetShowOverlay = this.resetShowOverlay.bind(this)
    this.handleYearMonthChange = this.handleYearMonthChange.bind(this)
  }
  
  isSelectingFirstDay(from, to, day) {
    const firstDayIsNotSelected = !from;
    const selectedDayIsBeforeFirstDay = day < from;
    const rangeIsSelected = from && to;
    return (
      firstDayIsNotSelected || selectedDayIsBeforeFirstDay || rangeIsSelected
    );
  }
  
  reset() {
    this.setState({
        from: null,
        to: null,
        enteredTo: null, // Keep track of the last day for mouseEnter.
      }
    );
  };

  handleInputFocus (){
    this.setState({
      showOverlay: true,
    });
  };

  handleInputChange (e){
    const { value } = e.target;
    const momentDay = moment(value, 'L', true);
    if (momentDay.isValid()) {
      this.setState(
        {
          selectedDay: momentDay.toDate(),
          value,
        },
        function() {
          this.daypicker.showMonth(this.state.selectedDay);
        }
      );
    } else {
      this.setState({ value, selectedDay: null });
    }
  };

  handleDayClick(day) {
    const { from, to } = this.state;

    if (DateUtils.isSameDay(day, from)) {
      this.reset();
      return;
    }

    if (this.isSelectingFirstDay(from, to, day)) {
      this.setState({
        from: day,
        to: null,
        enteredTo: null,
      });
      this.input.focus();
    } else {
      this.setState({
        to: day,
        enteredTo: day,
      }, function(){
        this.setState({
          showOverlay: false,
          finalValue: moment(this.state.from).format('L') + "-" + moment(this.state.to).format('L')
        });
        this.input.blur();
      });
      
    }
    
  };

  resetShowOverlay() {
    this.setState({
          showOverlay: !this.state.showOverlay
    });
  }

  handleDayMouseEnter(day) {
    const { from, to } = this.state;

    if (!this.isSelectingFirstDay(from, to, day)) {
      this.setState({
        enteredTo: day,
      });
    }
  };

  handleYearMonthChange(month){
    this.setState({ month });
  };

  render() {
    const { from, to, enteredTo, finalValue } = this.state;
    return (
      <div>
        <input
          type="text"
          ref={el => {
            this.input = el;
          }}
          readOnly={true}
          placeholder="DD/MM/YYYY - DD/MM/YYYY"
          value={(from && enteredTo) ? finalValue : ''}
          onChange={this.handleInputChange}
          onFocus={this.handleInputFocus}
        />
        <a href="javascript:void(0)" onClick={this.resetShowOverlay}><i className="glyphicon glyphicon-calendar datepicker-icon"></i></a>
        {this.state.showOverlay &&
          <div>
            <div style={overlayStyle}>
              <DayPicker
                numberOfMonths={2}
                ref={el => {
                  this.daypicker = el;
                }}
                month={this.state.month}
                fromMonth={from}
                toMonth={toMonth}
                selectedDays={[from, { from, to: enteredTo }]}
                disabledDays={{ before: this.state.from }}
                modifiers={{ start: from, end: enteredTo }}
                onDayClick={this.handleDayClick}
                onDayMouseEnter={this.handleDayMouseEnter}
              />
            </div>
          </div>}
      </div>
    );
  }
}
